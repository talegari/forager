% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stack_impute.R
\name{stack_impute}
\alias{stack_impute}
\title{Imputation by stacking complete and incomplete data}
\usage{
stack_impute(dataset, newdata, method = "missforest", seed = 1L, ...)
}
\arguments{
\item{dataset}{(dataframe) dataset}

\item{newdata}{(dataframe) newdata}

\item{method}{(string )One among: 'missforest', 'proximity'}

\item{seed}{(positive integer) seed}

\item{...}{Arguments to be passed to \code{\link[missRanger]{missRanger}} when method is 'missforest',  \code{\link{forest_impute}} when method is 'proximity'}
}
\value{
(dataframe) completed dataset
}
\description{
impute_stack
}
\examples{
\dontrun{
# divide isis data into test and train
set.seed(1)
index <- sample.int(150, 100)

iris_train <- iris[index, ]
iris_test  <- iris[-index, ]

# create some holes in test data
iris_test_missing <- missRanger::generateNA(iris_test, p = 0.2, seed = 2)

# stack imputation

# use missforest method
imputed_mf <- stack_impute(iris_train
                           , iris_test_missing
                           , method = "missforest"
                           , seed = 3
                           )

# metric: rmse for numeric, proportion of mismatches for categorical
metric_relative <- function(x, y, z){

  if(sum(z) == 0){
    return(0)
  }

  if(is.numeric(x)){
    mean(abs((y[z] - x[z])/y[z]))
  } else {
    sum(x[z] != y[z])/sum(z)
  }

}

# compare
mapply(metric_relative
       , iris_test
       , imputed_mf
       , as.data.frame(is.na(iris_test_missing))
       )

# use proximity method
imputed_pr <- stack_impute(iris_train
                           , iris_test_missing
                           , method = "proximity"
                           , seed = 3
                           )

# compare
mapply(metric_relative
       , iris_test
       , imputed_pr
       , as.data.frame(is.na(iris_test_missing))
       )
}
}
